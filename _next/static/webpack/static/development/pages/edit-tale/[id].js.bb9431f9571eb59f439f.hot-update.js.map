{"version":3,"file":"static/webpack/static\\development\\pages\\edit-tale\\[id].js.bb9431f9571eb59f439f.hot-update.js","sources":["webpack:///./components/common/storylet/Storylet.js"],"sourcesContent":["import React from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Box from '@material-ui/core/Box'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport Choice from './Choice'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEye, faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport AddIcon from '@material-ui/icons/AddBox'\r\nimport ReactoIcon from '../../common/icons/ReactoIcon'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { connect } from 'react-redux'\r\nimport { STORYLET_UPDATE_FIELD } from '../../../redux/actionTypes'\r\nimport { actionCreateChoice } from '../../../redux/actionCreators/createTaleActions'\r\nimport { orange } from '@material-ui/core/colors'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    textField: {\r\n        display: \"flex\",\r\n        marginTop: theme.spacing(2)\r\n    },\r\n    box: {\r\n        border: `5px double ${orange[500]}`,\r\n        borderRadius: 4,\r\n        position: \"relative\"\r\n    },\r\n    title: {\r\n        border: `5px double ${orange[500]}`,\r\n        position: \"absolute\",\r\n        background: '#fff',\r\n        padding: '0 5px',\r\n        borderRadius: 4,\r\n        top: -20,\r\n        left: 8,\r\n        fontSize: 14\r\n    },\r\n    joiner: {\r\n        position: \"absolute\",\r\n        height: theme.spacing(5),\r\n        borderLeft: `5px double ${orange[500]}`,\r\n        width: 1,\r\n        left: \"50%\",\r\n        top: -45\r\n    },\r\n    choiceContainer: {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"space-between\"\r\n    },\r\n    addChoiceBtn: {\r\n        alignSelf: \"center\",\r\n        height: 90,\r\n        borderRadius: 6,\r\n        margin: `0 ${theme.spacing(1)}px`,\r\n        textAlign: \"center\",\r\n        fontSize: 16,\r\n        lineHeight: \" 20px\",\r\n        '& span': {\r\n            display: \"block\"\r\n        },\r\n        '& svg': {\r\n            fontSize: 36\r\n        }\r\n    },\r\n    idTag: {\r\n        fontSize: 14,\r\n        display: 'inline-block',\r\n        backgroundColor: '#eee',\r\n        padding: '2px 5px',\r\n        borderRadius: 2,\r\n        '& .ico': {\r\n\r\n        }\r\n        // '& input': {\r\n        //     fontSize: 14,\r\n        //     backgroundColor: 'inherit',\r\n        //     outline: 'none',\r\n        //     border: 'none',\r\n        //     width: 60\r\n        // }\r\n    },\r\n    btnPanel: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        right: 0,\r\n        '& .ico': {\r\n            boxSizing: 'content-box',\r\n            padding: \"15px 8px\",\r\n            color: theme.palette.primary.main,\r\n            cursor: 'pointer',\r\n            // borderRadius: '50%',\r\n            verticalAlign: \"middle\",\r\n            fontSize: 18,\r\n            display: 'inline-block',\r\n            width: 30,\r\n            height: 20\r\n        },\r\n        '& .ico:active': {\r\n            backgroundColor: '#eee'\r\n        }\r\n    }\r\n}))\r\n\r\nconst Storylet = props => {\r\n    const classes = useStyles()\r\n    const { st, sbI, sbItem, createAChoice, choices, openFSE } = props\r\n    return (\r\n        <div>\r\n            {/* STORYLET BOX -- STARTS HERE */}\r\n            <Box className={classes.box} px={1} pb={2} pt={2}>\r\n                {(sbI !== 0) && <span className={classes.joiner}></span>}\r\n                <span className={classes.title}>Storylet</span>\r\n                <div className={classes.idTag}>\r\n                    <span>ID: {st.id}</span>\r\n                    {/* <input type=\"text\" value={st.id} disabled /> */}\r\n                </div>\r\n                <div className={classes.btnPanel}>\r\n                    <FontAwesomeIcon icon={faTrashAlt} className=\"ico\" />\r\n                    <ReactoIcon className=\"ico\" />\r\n                    <FontAwesomeIcon icon={faEye} className=\"ico\" />\r\n                    <FontAwesomeIcon \r\n                        icon={faPencilAlt} \r\n                        className=\"ico\" \r\n                        title=\"Edit this Storylet\" \r\n                        onClick={() => openFSE(st)}\r\n                    />\r\n                </div>\r\n                <form noValidate autoComplete=\"off\">\r\n                    <TextField\r\n                        label=\"Storylet title\"\r\n                        variant=\"outlined\"\r\n                        className={classes.textField}\r\n                        value={st.title}\r\n                        onChange={e => props.typingStValue(st.id, \"title\", e.target.value)}\r\n                    />\r\n                    <TextField\r\n                        label=\"Storylet body\"\r\n                        multiline\r\n                        rows=\"6\"\r\n                        variant=\"outlined\"\r\n                        className={classes.textField}\r\n                        value={st.text}\r\n                        onChange={e => props.typingStValue(st.id, \"text\", e.target.value)}\r\n                    />\r\n                </form>\r\n            </Box>\r\n            {/* STORYLET BOX -- ENDS HERE */}\r\n\r\n            {/* CHOICES BOX -- STARTS HERE */}\r\n            <Box className={classes.box} pt={2} pb={2} my={5}>\r\n                <span className={classes.joiner}></span>\r\n                <span className={classes.title}>Choices</span>\r\n                <div className={classes.choiceContainer}>\r\n                    {\r\n                        st.choices && st.choices.map(cID => (\r\n                            <Choice\r\n                                c={choices[cID]}\r\n                                stID={st.id}\r\n                                sbI={sbI}\r\n                                isSelected={sbItem.selectedCID === cID}\r\n                                key={cID}\r\n                            />\r\n                        ))\r\n                    }\r\n                    <Fab className={classes.addChoiceBtn} variant=\"extended\" color=\"primary\" onClick={() => createAChoice(props.st.id)}>\r\n                        <AddIcon />\r\n                        <span className=\"txt\">Add Choice</span>\r\n                    </Fab>\r\n                </div>\r\n\r\n            </Box>\r\n            {/* CHOICES BOX -- ENDS HERE */}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst UpdateStField = (stID, fieldName, value, dispatch) => {\r\n    dispatch({\r\n        type: STORYLET_UPDATE_FIELD,\r\n        payload: {\r\n            stID, fieldName, value\r\n        }\r\n    })\r\n}\r\nconst mapStateToProps = state => ({\r\n    choices: state.wipTale.choices\r\n})\r\nconst mapDispatchToProps = dispatch => ({\r\n    typingStValue: (stID, fieldName, value) => UpdateStField(stID, fieldName, value, dispatch),\r\n    createAChoice: stID => dispatch(actionCreateChoice(stID))\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Storylet)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAXA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AADA;AAhBA;AAjEA;AAAA;AACA;AAscsourceRoot":""}