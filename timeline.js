!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);n(1);let i,o,r=window.$;window.rto=window.rto||{};let c=[];function a(){let e="";for(let t=0;t<c.length;t++){e+=s(c[t],t)}i.html(e),function(e=c.length-1){let t=i.find(".storyboard-item").eq(e);r("html, body").animate({scrollTop:t.offset().top-100},500)}(),i.find(".choices .inner-container").each((function(){let e=r(this).find(".choice.selected");if(0===e.length)return;let t=e.eq(0).offset().left-41;console.log(t),r(this).scrollLeft(t)}))}function s(e,t){let n=o.storylets[e.stID],i=(r=n.choices,c=e.selectedCID,r.reduce((e,t,n)=>{let i=o.choices[t];return e+`\n            <div class="choice ${t===c?"selected":""}" data-cid="${i.id}">\n                <div class="c-i">Choice ${n+1}</div>\n                ${i.text}\n            </div>\n        `},""));var r,c;let a=function(e){return e.reduce((e,t,n)=>e+`\n            <span class="c-i-ball">${n+1}</span>\n        `,"")}(n.choices);return`\n        <div class="storyboard-item" data-sbindx="${t}">\n            <div class="storylet component-box">\n                <div class="joiner"></div>\n                <div class="name-label">Storylet</div>\n                <div>${n.text}</div>\n            </div>\n            <div class="choices component-box ${n.choices.length<=0?"hidden":""}">\n                <div class="joiner"></div>\n                <div class="name-label">Choices (${n.choices.length})</div>\n                <div class="balls">${a}</div>\n                <div class="inner-container">${i}</div>\n            </div>\n        </div>\n        `}rto.createTimeline=(e,t)=>{var n,s;i=r("#"+e),o=t,c=[(n=t.start,{stID:n,selectedCID:s})],i.addClass("reactive-timeline"),a(),i.off(),i.on("click",".choice",(function(){let e=r(this).attr("data-cid");!function(e,t,n){c=c.slice(0,t+1),c[t].selectedCID=n,c.push({stID:e}),a()}(o.choices[e].next,parseInt(r(this).closest(".storyboard-item").attr("data-sbindx")),e)})),i.on("click",".c-i-ball",(function(){let e=parseInt(r(this).text())-1,t=r(this).closest(".choices").find(".inner-container"),n=e*t.find(".choice ").width();t.animate({scrollLeft:n},500)}))}},function(e,t,n){var i=n(2),o=n(3);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1},c=(i(o,r),o.locals?o.locals:{});e.exports=c},function(e,t,n){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),c=[];function a(e){for(var t=-1,n=0;n<c.length;n++)if(c[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},i=[],o=0;o<e.length;o++){var r=e[o],s=t.base?r[0]+t.base:r[0],l=n[s]||0,d="".concat(s," ").concat(l);n[s]=l+1;var u=a(d),f={css:r[1],media:r[2],sourceMap:r[3]};-1!==u?(c[u].references++,c[u].updater(f)):c.push({identifier:d,updater:b(f,t),references:1}),i.push(d)}return i}function l(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var c=r(e.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(t)}return t}var d,u=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function f(e,t,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var r=document.createTextNode(o),c=e.childNodes;c[t]&&e.removeChild(c[t]),c.length?e.insertBefore(r,c[t]):e.appendChild(r)}}function p(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var v=null,h=0;function b(e,t){var n,i,o;if(t.singleton){var r=h++;n=v||(v=l(t)),i=f.bind(null,n,r,!1),o=f.bind(null,n,r,!0)}else n=l(t),i=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var o=a(n[i]);c[o].references--}for(var r=s(e,t),l=0;l<n.length;l++){var d=a(n[l]);0===c[d].references&&(c[d].updater(),c.splice(d,1))}n=r}}}},function(e,t,n){(t=n(4)(!1)).push([e.i,'.reactive-timeline .hidden{display:none !important}.reactive-timeline .component-box{border:5px double #ddd;padding:30px 15px 25px;border-radius:4px;margin-top:40px;position:relative}.reactive-timeline .joiner{position:absolute;top:-45px;left:50%;height:40px;width:.1px;border-left:5px double #ddd}.reactive-timeline .name-label{position:absolute;display:inline-block;border:5px double #ddd;top:-20px;padding:1px 7px 3px;border-radius:4px;background:#fff}.reactive-timeline .storyboard-item[data-sbindx="0"] .storylet .joiner{display:none}.reactive-timeline .component-box.choices{padding-bottom:0;padding-top:0}.reactive-timeline .choices .balls{position:absolute;left:15px;right:15px;top:23px;text-align:center;font-size:12px}.reactive-timeline .choices .balls .c-i-ball{display:inline-flex;justify-content:center;align-items:center;background:#999;height:22px;width:22px;color:#fff;border-radius:50%;margin:0 2px;cursor:pointer}.reactive-timeline .choices .balls .c-i-ball:active{background:#ccc;color:#000}.reactive-timeline .choices .inner-container{display:flex;overflow:auto;padding:50px 0 20px}.reactive-timeline .choice{box-shadow:-3px 3px 5px 0px #847676;border:1px solid #ddd;margin:5px;padding:5px 10px;cursor:pointer;min-width:200px}.reactive-timeline .choice.selected,.reactive-timeline .choice:active{box-shadow:inset -3px 3px 5px 0px #847676}.reactive-timeline .choice .c-i{font-size:14px;border-bottom:1px solid #999;margin-bottom:5px}\n',""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var o=(c=i,a=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),"/*# ".concat(s," */")),r=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(r).concat([o]).join("\n")}var c,a,s;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var c=this[r][0];null!=c&&(o[c]=!0)}for(var a=0;a<e.length;a++){var s=[].concat(e[a]);i&&o[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,