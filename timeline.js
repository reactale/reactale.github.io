!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);n(1);let i,o,r=window.$;window.rto=window.rto||{};let a=[];function c(){let e="";for(let t=0;t<a.length;t++){e+=s(a[t],t)}i.html(e)}function s(e,t){let n=o.storylets[e.stID],i=n.choices.reduce((e,t)=>{let n=o.choices[t];return e+`\n            <div class="choice" data-cid="${n.id}">\n                ${n.text}\n            </div>\n        `},"");return`\n        <div class="storyboard-item" data-sbindx="${t}">\n            <div class="storylet component-box">\n                <div class="joiner"></div>\n                <div class="name-label">Storylet</div>\n                <div>\n                    ${n.text}\n                </div>\n            </div>\n            <div class="choices component-box ${n.choices.length<=0?"hidden":""}">\n                <div class="joiner"></div>\n                <div class="name-label">Choices (${n.choices.length})</div>\n                <div class="inner-container">\n                    ${i}\n                </div>\n            </div>\n        </div>\n        `}rto.createTimeline=(e,t)=>{var n,s;i=r("#"+e),o=t,a=[(n=t.start,{stID:n,selectedCID:s})],i.addClass("reactive-timeline"),c(),i.off(),i.on("click",".choice",(function(){let e=r(this).attr("data-cid");!function(e,t,n){a=a.slice(0,t+1),a[t].selectedCID=n,a.push({stID:e}),c()}(o.choices[e].next,parseInt(r(this).closest(".storyboard-item").attr("data-sbindx")),e)}))}},function(e,t,n){var i=n(2),o=n(3);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1},a=(i(o,r),o.locals?o.locals:{});e.exports=a},function(e,t,n){"use strict";var i,o=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},r=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function c(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},i=[],o=0;o<e.length;o++){var r=e[o],s=t.base?r[0]+t.base:r[0],d=n[s]||0,l="".concat(s," ").concat(d);n[s]=d+1;var u=c(l),p={css:r[1],media:r[2],sourceMap:r[3]};-1!==u?(a[u].references++,a[u].updater(p)):a.push({identifier:l,updater:m(p,t),references:1}),i.push(l)}return i}function d(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=r(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,u=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function p(e,t,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=u(t,o);else{var r=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(r,a[t]):e.appendChild(r)}}function f(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var v=null,h=0;function m(e,t){var n,i,o;if(t.singleton){var r=h++;n=v||(v=d(t)),i=p.bind(null,n,r,!1),o=p.bind(null,n,r,!0)}else n=d(t),i=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var o=c(n[i]);a[o].references--}for(var r=s(e,t),d=0;d<n.length;d++){var l=c(n[d]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}n=r}}}},function(e,t,n){(t=n(4)(!1)).push([e.i,'.reactive-timeline .hidden{display:none !important}.reactive-timeline .component-box{border:5px double #ddd;padding:30px 15px 25px;border-radius:4px;margin-top:40px;position:relative}.reactive-timeline .joiner{position:absolute;top:-45px;left:50%;height:40px;width:.1px;border-left:5px double #ddd}.reactive-timeline .name-label{position:absolute;display:inline-block;border:5px double #ddd;top:-20px;padding:1px 7px 3px;border-radius:4px;background:#fff}.reactive-timeline .storyboard-item[data-sbindx="0"] .storylet .joiner{display:none}.reactive-timeline .component-box.choices{padding-bottom:0;padding-top:0}.reactive-timeline .choices .inner-container{display:flex;overflow:auto;padding:30px 0 15px}.reactive-timeline .choice{box-shadow:-3px 3px 5px 0px #847676;border:1px solid #ddd;margin:5px;padding:5px 10px;cursor:pointer;min-width:200px}.reactive-timeline .choice.selected,.reactive-timeline .choice:active{box-shadow:inset -3px 3px 5px 0px #847676}\n',""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var o=(a=i,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),r=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[n].concat(r).concat([o]).join("\n")}var a,c,s;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var a=this[r][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);i&&o[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,