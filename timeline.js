!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t){let n,i,o=window.$;window.rto=window.rto||{};let c=[];function r(){let e="";for(let t=0;t<c.length;t++){e+=s(c[t],t)}n.html(e),function(e=c.length-1){let t=n.find(".storyboard-item").eq(e);o("html, body").animate({scrollTop:t.offset().top-100},500)}(),n.find(".choices .inner-container").each((function(){let e=o(this).find(".choice.selected");if(0===e.length)return;let t=e.eq(0).offset().left-41;console.log(t),o(this).scrollLeft(t)}))}function s(e,t){let n=i.storylets[e.stID],o=(c=n.choices,r=e.selectedCID,c.reduce((e,t,n)=>{let o=i.choices[t];return e+`\n            <div class="choice ${t===r?"selected":""}" data-cid="${o.id}">\n                <div class="c-i">Choice ${n+1}</div>\n                ${o.text}\n            </div>\n        `},""));var c,r;let s=function(e){return e.reduce((e,t,n)=>e+`\n            <span class="c-i-ball">${n+1}</span>\n        `,"")}(n.choices);return`\n        <div class="storyboard-item" data-sbindx="${t}">\n            <div class="storylet component-box">\n                <div class="joiner"></div>\n                <div class="name-label">Storylet</div>\n                <div class="st-text">${"function"==typeof rto.process?rto.process(n.text):n.text}</div>\n            </div>\n            <div class="choices component-box ${n.choices.length<=0?"hidden":""}">\n                <div class="joiner"></div>\n                <div class="name-label">Choices (${n.choices.length})</div>\n                <div class="balls">${s}</div>\n                <div class="inner-container">${o}</div>\n            </div>\n        </div>\n        `}rto.createTimeline=(e,t)=>{var s,l;n=o("#"+e),i=t,c=[(s=t.start,{stID:s,selectedCID:l})],n.addClass("reactive-timeline"),r(),n.off(),n.on("click",".choice",(function(){let e=o(this).attr("data-cid");!function(e,t,n){c=c.slice(0,t+1),c[t].selectedCID=n,c.push({stID:e}),r()}(i.choices[e].next,parseInt(o(this).closest(".storyboard-item").attr("data-sbindx")),e)})),n.on("click",".c-i-ball",(function(){let e=parseInt(o(this).text())-1,t=o(this).closest(".choices").find(".inner-container"),n=e*t.find(".choice ").width();t.animate({scrollLeft:n},500)}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,